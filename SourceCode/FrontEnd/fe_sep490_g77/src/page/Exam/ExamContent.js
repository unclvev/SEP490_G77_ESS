import { React, useEffect, useState } from "react";
import { Card, Button, List } from "antd";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faTrash, faUser, faChartBar, faPlus, faGear } from "@fortawesome/free-solid-svg-icons";
import { toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import UserSearchModal from "../../components/Exam/usersearch";
import Swal from "sweetalert2";
import { useSearchParams } from "react-router-dom";
import { getExam } from "../../services/api";

const ExamDetail = () => {
  const [searchParams] = useSearchParams();
  const id = searchParams.get("id");
  const [examInfo, setExamInfo] = useState(null);
  const [questions, setQuestions] = useState([]);
  const [isModalVisible, setIsModalVisible] = useState(false);

  useEffect(() => {
    const fetchExam = async () => {
      try {
        const response = await getExam(id);
        //if (!response.ok) throw new Error(`Error ${response.status}: ${response.statusText}`);

        const data = await response.data;
        const examData = JSON.parse(data.examdata); // Gi·∫£i m√£ chu·ªói JSON trong `Examdata`

        setExamInfo({
          title: data.examname,
          createdAt: new Date(data.createdate).toLocaleString(),
          creator: "Unknown", // C√≥ th·ªÉ c·∫ßn API kh√°c ƒë·ªÉ l·∫•y t√™n ng∆∞·ªùi t·∫°o t·ª´ `AccId`
          attempts: 0, // Th√™m n·∫øu API c√≥ tr·∫£ v·ªÅ s·ªë l∆∞·ª£t l√†m
        });

        setQuestions(examData.Questions);
      } catch (error) {
        console.error("Error fetching exam:", error);
        toast.error("L·ªói khi t·∫£i d·ªØ li·ªáu b√†i thi");
      }
    };

    fetchExam();
  }, [id]);

  const handleDelete = () => {
    Swal.fire({
      title: "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a?",
      text: "H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#d33",
      cancelButtonColor: "#3085d6",
      confirmButtonText: "X√≥a",
      cancelButtonText: "H·ªßy",
    }).then(async (result) => {
      if (result.isConfirmed) {
        try {
          await fetch(`https://your-api-url.com/exams/${id}`, { method: "DELETE" });
          Swal.fire("ƒê√£ x√≥a!", "B√†i thi ƒë√£ b·ªã x√≥a.", "success");
        } catch (error) {
          Swal.fire("L·ªói!", "Kh√¥ng th·ªÉ x√≥a b√†i thi.", "error");
        }
      }
    });
  };

  if (!examInfo) {
    return <p style={{ textAlign: "center", marginTop: 50 }}>ƒêang t·∫£i...</p>;
  }

  return (
    <div style={{ display: "flex", height: "100vh", backgroundColor: "#f9f9f9" }}>
      {/* Sidebar */}
      <div style={{ width: 280, background: "#fff", padding: 20, borderRight: "2px solid #ddd", borderRadius: "8px" }}>
        <h3>{examInfo.title}</h3>
        <p>üìÖ Ng√†y t·∫°o: {examInfo.createdAt}</p>
        <p>üë§ Ng∆∞·ªùi t·∫°o: {examInfo.creator}</p>
        <p>üìä S·ªë l∆∞·ª£t l√†m: {examInfo.attempts}</p>
        <Button type="default" block style={{ marginTop: 10 }}>
          <FontAwesomeIcon icon={faGear} /> C√†i ƒë·∫∑t
        </Button>
        <Button type="default" block style={{ marginTop: 10 }}>
          <FontAwesomeIcon icon={faChartBar} /> Th·ªëng k√™
        </Button>
        <Button type="primary" danger block style={{ marginTop: 10 }} onClick={handleDelete}>
          <FontAwesomeIcon icon={faTrash} /> X√≥a
        </Button>

        <h4 style={{ marginTop: 20 }}>Ph√¢n quy·ªÅn</h4>
        <Button type="dashed" block onClick={() => setIsModalVisible(true)}>
          <FontAwesomeIcon icon={faPlus} /> Th√™m ng∆∞·ªùi d√πng
        </Button>
        <UserSearchModal visible={isModalVisible} onClose={() => setIsModalVisible(false)} />
      </div>

      {/* Question List */}
      <div style={{ flex: 1, padding: 20, overflowY: "auto" }}>
        {questions.map((q, index) => (
          <Card key={q.QuestionId} title={`C√¢u ${index + 1}`} style={{ marginBottom: 20, border: "2px solid #007bff", borderRadius: "8px" }}>
            <p>{q.Content}</p>
            {q.Answers && (
              <List bordered dataSource={q.Answers} renderItem={(answer) => <List.Item>{answer.Content}</List.Item>} />
            )}
          </Card>
        ))}
      </div>
    </div>
  );
};

export default ExamDetail;
